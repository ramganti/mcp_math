"use strict";
exports.__esModule = true;
var const_1 = require("./const");
var GV = require("../common/global_variables");
/**
 * Clase Sdk con funciones comunes
 * @class
 * */
var SdkUtils = /** @class */ (function () {
    function SdkUtils() {
    }
    SdkUtils.prototype.toLoopAndStylize = function (className, styles) {
        var htmlNodes = Array.from(document.querySelectorAll(className));
        if (htmlNodes && htmlNodes.length > 0) {
            htmlNodes.forEach(function (htmlNode) {
                htmlNode.style.cssText = styles;
            });
        }
    };
    SdkUtils.prototype.detectHttpRequests = function () {
        var isIE = this.detectInternetExplorer();
        (function (open) {
            XMLHttpRequest.prototype.open = function () {
                this.addEventListener("readystatechange", function (e) {
                    var respondURL = isIE ? this._url : this.responseURL;
                    var isSafari = /constructor/i.test(window.HTMLElement) || (function (p) {
                        return p.toString() === "[object SafariRemoteNotification]";
                    })(!window['safari'] || (typeof safari !== 'undefined' && safari.pushNotification));
                    if (isSafari) {
                        respondURL = this._url;
                    }
                    if (respondURL) {
                        if (this.status == 200 && respondURL.match(/[/]cart.js/gi) && this.readyState == 4) {
                            if ((this.response)) {
                                if (typeof this.response === 'string')
                                    GV.$cartDispared.next(JSON.parse(this.response));
                                else if (typeof this.response === 'object')
                                    GV.$cartDispared.next(this.response);
                            }
                        }
                    }
                }, false);
                open.apply(this, arguments);
            };
        })(XMLHttpRequest.prototype.open);
    };
    /**
     * @function hideHtmlClasses
     * @param {string} className - Classnames to hide on DOM
     */
    SdkUtils.prototype.hideHtmlClasses = function (className) {
        this.toLoopAndStylize(className, 'display: none');
    };
    /**
     * @function showHtmlClasses
     * @param {string} className - Classnames to show on DOM
     */
    SdkUtils.prototype.showHtmlClasses = function (className) {
        this.toLoopAndStylize(className, 'display: block');
    };
    /**
     * detecta si es internet explorer
     * @return {boolean}
     * */
    SdkUtils.prototype.detectInternetExplorer = function () {
        var ua = navigator.userAgent;
        return ua.match(/Trident/g);
    };
    SdkUtils.prototype.getDate = function () {
        var msecPerMinute = 1000 * 60;
        var msecPerHour = msecPerMinute * 60;
        var msecPerDay = msecPerHour * 24;
        var date = new Date();
        var dateMsec = date.getTime();
        date.setMonth(0);
        date.setDate(1);
        date.setHours(0, 0, 0, 0);
        var interval = dateMsec - date.getTime();
        var days = Math.floor(interval / msecPerDay);
        interval = interval - (days * msecPerDay);
        // Calculate the hours, minutes, and seconds.
        var hours = Math.floor(interval / msecPerHour);
        interval = interval - (hours * msecPerHour);
        var minutes = Math.floor(interval / msecPerMinute);
        interval = interval - (minutes * msecPerMinute);
        var seconds = Math.floor(interval / 1000);
        return days + '' + hours + '' + minutes + '' + seconds;
    };
    SdkUtils.prototype.changeLastCountry = function (country) {
        GV.store.set('last_country', country);
    };
    SdkUtils.prototype.showLoaders = function (rutaLoaderGif, properties) {
        var rutaLoaderGif = "https://s3.amazonaws.com/sky-sbc-images/WebApp/SBC/Images/loaders/loaderGris.gif";
        if (const_1.SDK_SETTINGS.SKBX_LOADER_NAME) {
            rutaLoaderGif = "https://s3.amazonaws.com/sky-sbc-images/WebApp/SBC/Images/loaders/" + const_1.SDK_SETTINGS.SKBX_LOADER_NAME;
        }
        var html = "<div><img style=\"height: 15px;width: 100px !important\" src=\"" + rutaLoaderGif + "\" /></div>";
        $("[class*=skbx-loader]").html(html);
    };
    SdkUtils.prototype.calcWeightAndUnit = function (grams) {
        var weight, unit;
        if (grams && !isNaN(grams)) {
            weight = (grams / 1000).toFixed(3);
            unit = 'KGS';
        }
        return {
            weight: weight,
            unit: unit
        };
    };
    SdkUtils.prototype.currency_format = function (n, currency) {
        var result;
        n = parseFloat(n);
        result = currency + " " + n.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,");
        result = result.replace(/\.00/g, '');
        return result;
    };
    SdkUtils.prototype.elementVisibleStore = function (visible, skbx_price, skbx_pricestore) {
        if (skbx_price === void 0) { skbx_price = '.skbx-price'; }
        if (skbx_pricestore === void 0) { skbx_pricestore = '.skbx-price-store'; }
        if (visible) {
            this.hideHtmlClasses(skbx_price);
            this.showHtmlClasses(skbx_pricestore);
        }
        else {
            this.hideHtmlClasses(skbx_pricestore);
            this.showHtmlClasses(skbx_price);
        }
    };
    SdkUtils.prototype.hideLoader = function (id) {
        $(".skbx-loader-" + id).hide();
    };
    SdkUtils.prototype.hideLoaders = function () {
        $("[class*=skbx-loader]").hide();
    };
    /** @ToDo analizar esta función, se podria reducir, y manejar mejor los tipos de datos numbers y string */
    SdkUtils.prototype.updateShoppingCart = function (carts, fractionDigits) {
        if (fractionDigits === void 0) { fractionDigits = 2; }
        this.showLoaders();
        if (carts && Object.keys(carts).length > 0) {
            var Data = carts.Data;
            var Cart = Data.Cart;
            var Items = Cart.Items.reverse();
            for (var i = 0; i < Items.length; i++) {
                var idProductStore = Items[i].Code;
                var d = Data;
                var CartCurrencyIso = d.Cart.Currency;
                var skbx_quantity_product = Items[i].Quantity;
                var storeProductPrice = Items[i].Price.toString();
                storeProductPrice = storeProductPrice.replace(/,/g, '');
                var skbx_total_product = 0;
                if (storeProductPrice !== null) {
                    skbx_total_product = (skbx_quantity_product * Number(storeProductPrice));
                }
                skbx_total_product = Math.round(skbx_total_product * 100) / 100;
                skbx_total_product = Number(parseFloat("" + skbx_total_product).toFixed(fractionDigits));
                skbx_total_product = Number(this.currency_format(skbx_total_product, ''));
                storeProductPrice = Math.round(Number(storeProductPrice) * 100) / 100;
                storeProductPrice = parseFloat(storeProductPrice).toFixed(fractionDigits);
                storeProductPrice = this.currency_format(storeProductPrice, '');
                $('.sky--Price-' + idProductStore).html(CartCurrencyIso + ' ' + storeProductPrice);
                $('.sky--Total-' + idProductStore).html(CartCurrencyIso + ' ' + skbx_total_product);
                this.hideLoader(idProductStore);
            }
        }
        else {
            this.hideLoaders();
        }
    };
    /** @ToDo acomodar esta función con buenas prácticas */
    SdkUtils.prototype.conceptsTableCart = function (data) {
        var htmlCart = '';
        if (data) {
            htmlCart += '<div class="cart-totals-wrapper">';
            htmlCart += '    <table id="shopping-cart-totals-table">';
            htmlCart += '        <tbody>';
            var conceptos_detail = data.Data.Concepts;
            if (conceptos_detail.length > 0) {
                for (var x = 0; x < conceptos_detail.length; x++) {
                    htmlCart += '  <tr>';
                    htmlCart += '    <td class="description">' + conceptos_detail[x].Name + '</td>';
                    htmlCart += '    <td class="amount">';
                    htmlCart += '     <span>' + conceptos_detail[x].Currency + ' ' + conceptos_detail[x].Price + '</span>';
                    htmlCart += '    </td>';
                    htmlCart += '   </tr>';
                }
                htmlCart += '            <tr>';
                htmlCart += '                <td class="description">';
                htmlCart += '                    <strong>Grand Total</strong>';
                htmlCart += '                </td>';
                htmlCart += '               <td class="amount">';
                htmlCart += '                   <strong>';
                htmlCart += '                       <span>' + conceptos_detail[0].Currency + ' ' + data.Data.Product.Local.Total + '</span>';
                htmlCart += '                   </strong>';
                htmlCart += '               </td>';
                htmlCart += '            </tr>';
                htmlCart += '        </tbody>';
                htmlCart += '    </table>';
                htmlCart += '</div>';
            }
        }
        return htmlCart;
    };
    SdkUtils.prototype.initBtnSkyCheckout = function (authData) {
        var skybox_payment_btns = Array.from(document.querySelectorAll('.skybox-checkout-payment-btn')), checkout_button_text = 'PROCEED TO CHECKOUT';
        if (skybox_payment_btns.length) {
            skybox_payment_btns.forEach(function (btn) {
                btn.style.cssText = 'display: none';
                if (authData.Data.LocationAllow === 1) {
                    if (authData.Data.IntegrationType === 3) {
                        checkout_button_text = const_1.CHECKOUT_BUTTON_TEXT;
                    }
                    btn.innerHTML = "<a href=\"" + const_1.SDK_SETTINGS.CHECKOUT_PAGE + "\" class=\"" + const_1.SDK_SETTINGS.CHECKOUT_BUTTON_CLASS + "\">" + checkout_button_text + "</a>";
                    btn.style.cssText = 'display: block';
                }
            });
        }
    };
    return SdkUtils;
}());
exports.SdkUtils = SdkUtils;

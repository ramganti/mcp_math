export function isObject(object: any) {
    return typeof object === 'object';
}

export function removeDuplicates(myArr: any[], prop: string) {
    return myArr.filter((obj, pos, arr) => {
        return arr.map(mapObj => mapObj[prop]).indexOf(obj[prop]) === pos;
    });
}

export function compare(a: any, b: any) {
    return JSON.stringify(a) === JSON.stringify(b);
}

export interface IDiffObjects<A> {
    added: A,
    removed: A,
    common: A
}

export function arrayObjectDiff<T>(listOriginal: any[], listNew: any[], uniqueProp: string): IDiffObjects<T> {
    var delta: any = {
        added: [],
        removed: [],
        common: []
    };
    var _deltaMap: any = {};
    var _objHolder: any = {};
    listOriginal.forEach(function (item) {
        _objHolder[uniqueProp && item[uniqueProp] || item] = item;
        _deltaMap[uniqueProp && item[uniqueProp] || item] = 'remove';
    });
    listNew.forEach(function (item) {
        _objHolder[uniqueProp && item[uniqueProp] || item] = item;
        var d = _deltaMap[uniqueProp && item[uniqueProp] || item];
        if (Boolean(d) && d == 'remove') {
            _deltaMap[uniqueProp && item[uniqueProp] || item] = 'noChange';
        } else {
            _deltaMap[uniqueProp && item[uniqueProp] || item] = 'added';
        }
    });
    Object.keys(_deltaMap).forEach(function (id) {
        if (_deltaMap[id] == 'remove') delta.removed.push(_objHolder[id]);
        else if (_deltaMap[id] == 'added') delta.added.push(_objHolder[id]);
        else if (_deltaMap[id] == 'noChange') delta.common.push(_objHolder[id]);
    });
    return delta;
}
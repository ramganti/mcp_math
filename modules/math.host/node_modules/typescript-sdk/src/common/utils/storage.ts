import {interval} from 'rxjs/observable/interval';
import {timer} from 'rxjs/observable/timer';
import {takeUntil, tap} from "rxjs/operators";
import {Observable} from "rxjs/Observable";

export class Storage {
    private expiration_name = '_expiration';
    private subscribers: any = {};

    constructor() {
        this.initStorageWithExpiration();
    }

    private initStorageWithExpiration() {
        const keysSessionStorage = Object.keys(sessionStorage);
        if (keysSessionStorage.length) {
            for (const k in keysSessionStorage) {
                if (k) {
                    if (k.includes(this.expiration_name)) {
                        this.setExpirationToKey(k);
                    }
                }
            }
        }
    }

    private setExpirationToKey(k: string) {
        const expirations: any = this.get(`${k}${this.expiration_name}`);
        const timesDifference = Number(expirations) - new Date().getTime();
        this.subscribers[k] = interval(1000).pipe(
            takeUntil(timer(timesDifference).pipe(tap(() => {
                this.remove(k);
                this.remove(`${k}${this.expiration_name}`);
            }))));
    }

    get(key: string): Object {
        return JSON.parse(sessionStorage.getItem(key));
    }

    set(key: string, value: Object, expiration?: number, callback?: Function) {
        sessionStorage.setItem(key, JSON.stringify(value));
        if (expiration) {
            let end = new Date();
            end.setSeconds(end.getSeconds() + (expiration / 1000));
            this.set(`${key}${this.expiration_name}`, `${end.getTime()}`);
            this.setExpirationToKey(key);
        }
    }

    remove(key: string) {
        sessionStorage.removeItem(key);
    }

    getExpirationIntervalFromKey(key: string): Observable<number> {
        if (key in this.subscribers) {
            return this.subscribers[key];
        }
        throw new Error(`${key} no tiene expiraci√≥n`);
    }
}
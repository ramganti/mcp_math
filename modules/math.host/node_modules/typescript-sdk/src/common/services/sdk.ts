import {Http} from "../utils/http";
import {
    IIPData,
    ISdkSettings,
    IResponseAuth,
    ISdkConfig,
    IBodyMulticalculate,
    ICart,
    IResponseMulticaculate
} from "../interfaces";
import {Observable, of, Subject, throwError} from "rxjs";
import {map, tap, retryWhen, flatMap, take, delay, delayWhen} from "rxjs/operators";
import {AjaxResponse} from "rxjs/ajax";
import {IMagentoDeleteBody} from "../interfaces/sdk";
import {timer} from 'rxjs/observable/timer';

export class SdkService extends Http {
    settings: ISdkSettings;
    apiConfig: ISdkConfig;

    $cartJs = new Subject();

    constructor(settings: ISdkSettings, apiConfig: ISdkConfig) {
        super();
        this.settings = settings;
        this.apiConfig = apiConfig;
    }

    authHeaders: Object;

    setAuthHeader(token: string, merchantCode: string) {
        this.authHeaders = {
            'Content-Type': 'application/json',
            'Authorization': token,
            'X-Skybox-Merchant-Id': merchantCode,
            'Access-Control-Allow-Origin': "*",
        };
        this.setHeaders(this.authHeaders);
    }

    /**
     * Método que trae la información (IP, localidad, caracteristicas de navegador)
     * @return {Observable<IIPData>} observable
     * */
    getIP(): Observable<IIPData> {
        return this.get(this.settings.URL + '/').pipe(map(r => r.response));
    }

    /**
     * Método para autenticar la aplicación web
     * @return {Observable<IResponseAuth>} observable
     * */
    authenticate(body: IIPData): Observable<IResponseAuth> {
        return this.post(this.apiConfig.SKYBOX_CHECKOUT_AUHT_CART + '/', body).pipe(map(r => r.response));
    }

    /**
     * Método que traera la información actual que existe en el carrito
     * @return {Observable<IResponseAuth>} observable
     * */
    getCart(cartId: string): Observable<ICart> {
        const cartUrl = `${this.apiConfig.SKYBOX_CHECKOUT_CART}/${cartId}/`;
        return this.get(cartUrl).pipe(map(r => r.response));
    }

    /**
     * ?
     * @return {Observable<IResponseMulticaculate>} observable
     * */
    getMulticalculate(body: IBodyMulticalculate, headers?: {}): Observable<IResponseMulticaculate> {
        const specificHeader = {...headers, ...this.authHeaders};
        return this.post(this.apiConfig.SKYBOX_CHECKOUT_MULTICALCULATE + '/', body, specificHeader)
            .pipe(map(r => r.response));
    }

    /** Cada que se haga un llamado a este servicio, se hara un push a la variable `$cartJS`  */
    getCartJs(): Observable<AjaxResponse> {
        return this.get('/cart.js').pipe(tap((r) => this.$cartJs.next(r)));
    }

    /**
     * @param {string} url uri del que se obtendra el HTML del multicalculate
     * @returns {Observable} observable con un delay de 1 segundo, maximo de 10 veces
     * */
    getHTMLMulticalculate(url: string): Observable<string> {
        return this.get(url, {}, 'text').pipe(map(r => r.response), retryWhen(error => {
            return error.pipe(flatMap(error => {
                if (error.status !== 200) {
                    return of(error.status)
                }
                return throwError({error: 'No retry'});
            }), delay(1000), take(10));
        }));
    }

    /** @ToDo definir bien el body, crear su interface */
    addProducts(cartId: string, body: any, headers: {}) {
        const specificHeader = {...headers, ...this.authHeaders};
        const url = this.urlProductChange(cartId)
        return this.post(url, body, specificHeader).pipe(map(r => r.response));
    }

    editProducts(cartId: string, body: any, headers: {}) {
        const specificHeader = {...headers, ...this.authHeaders};
        const url = this.urlProductChange(cartId)
        return this.put(url, body, specificHeader).pipe(map(r => r.response));
    }

    removeProducts(cartId: string, productId: string, headers: {}) {
        const specificHeader = {...headers, ...this.authHeaders};
        const url = this.urlProductChange(cartId, productId);
        return this.delete(url).pipe(map(r => r.response));
    }

    removeCart(cartId: string) {
        const url = this.urlProductChange(cartId)
        return this.delete(url).pipe(map(r => r.response));
    }

    getConcepts<T>(cartID: string): Observable<T> {
        const url = `${this.apiConfig.SKYBOX_CHECKOUT_CART}/${cartID}/concepts`;
        return this.get(url).pipe(map(r => r.response));
    }

    cartShopifyDelete(body: any) {
        return this.post('/cart/update.js', body).pipe(map(r => r.response));
    }

    cartBigCommerceDelete<T>(cardId: string, itemId: string): Observable<T> {
        return this.delete(`/carts/${cardId}/items/${itemId}`)
            .pipe(map(r => {
                const data = r.response.lineItems.physicalItems;
                if (data) {
                    if (data.find((v: any) => v.id === itemId)) throw r
                }
                return r.response;
            }), retryWhen(errors => errors.pipe(
                tap(val => console.log(`Value ${val}`)),
                //restart in 1 seconds
                delayWhen(() => timer(1000)))));
    }

    cartMagentoDelete(body: IMagentoDeleteBody[]) {
        const bodyString = JSON.stringify(body);
        return this.get(`/delete?idVariant=${bodyString}&i=${Math.floor((Math.random() * 9999 + 1000))}`)
    }

    private urlProductChange = (cartId: string, productId?: string) => {
        if (productId) return `${this.apiConfig.SKYBOX_CHECKOUT_CART}/${cartId}/product/${productId}/`;
        else return `${this.apiConfig.SKYBOX_CHECKOUT_CART}/${cartId}/products/`;
    }

}
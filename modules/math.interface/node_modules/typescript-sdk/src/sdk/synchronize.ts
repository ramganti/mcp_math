import {
    ICardDetailItem,
    ICart,
    IConcept,
    IResponseAuth,
    IShopifyCart,
    IShopifyCartItem
} from "../common/interfaces";
import {SDK_SETTINGS, STORAGE_KEY} from "./const";
import {arrayObjectDiff} from "../common/utils/utils";
import {SdkService} from "../common/services/sdk";
import * as GV from "../common/global_variables";
import {take, tap} from "rxjs/operators";
import {SdkUtils} from "./utils";
import {tingle} from "../common/global_variables";
import {$initSynchronize, SynchronizeActions} from "../common/global_variables";


export class CartSynchronize {
    private sdkService: SdkService;
    private utils = new SdkUtils();
    shopifyCart: IShopifyCart;
    cart: ICart;
    authData: IResponseAuth;
    loaderModal = new tingle.modal({
        footer: false,
        stickyFooter: false,
        closeMethods: []
    });

    constructor(shopifyCart: IShopifyCart, sdkService: SdkService) {
        this.setContentModal();
        this.sdkService = sdkService;
        this.shopifyCart = shopifyCart;
        this.cart = <ICart>GV.store.get(STORAGE_KEY.CART_PROD_ARR);
        this.authData = <IResponseAuth>GV.store.get(STORAGE_KEY.AUTH_STORE);

        GV.$cartData.subscribe((cart) => {
            this.cart = cart;
        });
        GV.$authData.subscribe((authData) => {
            this.authData = authData;
        });
    }

    updateCart(cart: ICart) {
        this.cart = cart;
        if (SDK_SETTINGS.INTEGRATION === 1) {
            this.utils.updateShoppingCart(this.cart);
            this.sdkService.getConcepts<IConcept>(this.cart.Data.Cart.Id).subscribe((conceptos) => {
                const conceptHTML = this.utils.conceptsTableCart(conceptos);
                this.setHtmlConceptDetail(conceptHTML);
            });
        } else {
            this.utils.initBtnSkyCheckout(this.authData);
        }
    }

    private setContentModal() {
        let rutaLoaderGif = "https://s3.amazonaws.com/sky-sbc-images/WebApp/SBC/Images/loaders/loaderGris.gif";

        if (SDK_SETTINGS.SKBX_LOADER_NAME) {
            rutaLoaderGif = "https://s3.amazonaws.com/sky-sbc-images/WebApp/SBC/Images/loaders/" + SDK_SETTINGS.SKBX_LOADER_NAME;
        }
        this.loaderModal.setContent(
            `<center> 
            <span class="restricted-msg"> Wait a moment please </span>
            <div style="padding-top: 10px;">
            <img src="${rutaLoaderGif}"/>
            </div>
            </center>`
        );
    }

    synchronize() {
        $initSynchronize.next('Se inicio sincronización');
        const auth = <IResponseAuth>GV.store.get(STORAGE_KEY.AUTH_STORE);
        const currentCountry = auth.Data.CART_SKY.Country.Name.trim().toUpperCase();
        let itemsSky = this.cart.Data.Cart.Items;
        let itemsStore = this.shopifyCart.items;
        /** valido si es que hay items en el cart de shopify */
        if (itemsStore && itemsStore.length) {
            /** valido si el pais anterior es igual al actual */
            if (currentCountry === GV.LAST_COUNTRY) {
                /** valido si existen items en el carrito de Sky */
                if (itemsSky && itemsSky.length) {
                    /** creo unos atributos mas al carrito de shopify */
                    itemsStore = this.editShopifyItemsData(itemsStore);
                    /** aqui realizare las acciones de editar, remover, agregar, segun sea el caso */
                    this.detectChangesStoreItemsAndSkyItems(itemsSky, itemsStore);
                } else {
                    /** si en caso no hay items en el carrito de Sky, pero si hay en el de Shopify */
                    this.addProduct(itemsStore);
                }
            } else {
                /** si en caso el pais anterior y el actual son diferentes, se cargara un modal de espera */
                this.loaderModal.open();
                this.detectChangesStoreItemsAndSkyItems(itemsSky, itemsStore, currentCountry);
            }
        } else {
            /** @ToDo preguntar si esto va asi, o deberia cambiarse */
            if (itemsSky.length) {
                this.removeCart();
            } else {
                GV.store.remove(STORAGE_KEY.CART_PROD_ARR);
            }
        }
    }

    /**
     * Método que detectara los cambios que ha habido cuando se agrega, edita, elimina algun producto del carrito de la tienda.
     * @param {ICardDetailItem} itemsSky productos desde SkyCheckout
     * @param {IShopifyCartItem} itemsSky productos desde la tienda actual (Shopify, Magento, BigCommerce, etc)
     * */

    private detectChangesStoreItemsAndSkyItems(itemsSky: ICardDetailItem[], itemsStore: IShopifyCartItem[], currentCountry?: string) {
        let countChanges = 0;
        /** verifico si entre el carrito de shopify y de SKY hay diferencias */
        const changes = arrayObjectDiff<ICardDetailItem[]>(itemsSky, itemsStore, 'Code');

        /** almaceno los productos restringidos si en caso hubiera */
        const restrictedProducts = itemsSky.filter((p) => p.IsRestricted);

        /** si esto es verdadero, remuevo del carrito los productos restringidos */
        if (restrictedProducts.length) {
            countChanges++;
            if (currentCountry) {
                this.deleteProductsFromCart(restrictedProducts, itemsStore, currentCountry);
            }
            restrictedProducts.forEach(async (v) => await this.removeProduct(`${v.Id}`, true));
        }
        /** si esto es verdadero, se agregara productos al carrito */
        if (changes.added.length) {
            countChanges++;
            this.addProduct(changes.added as any);
        }

        /** si esto es verdadero, removera uno o mas productos del carrito */
        if (changes.removed.length) {
            countChanges++;
            changes.removed.forEach(async (v) => await this.removeProduct(`${v.Id}`, true));
        }

        /** si esto es verdadero, se evaluara si se editara el carrito o no se ha realizado cambios en este */
        if (changes.common.length) {
            let array_diff: any = [];

            changes.common.forEach((v, i, array) => {
                const skyItem = itemsSky.find((s) => s.Code === v.Code);
                if (skyItem && v.Quantity.toString() != skyItem.Quantity.toString()) {
                    array_diff.push({Id: skyItem.Id, Quantity: v.Quantity});
                }
            });
            /** validamos si es que hay diferencias entre el carrito de shopify y SKY, si las hay, se procedera a editar el carrito */
            if (array_diff.length > 0) {
                countChanges++;
                let productsEdited = {'Product': array_diff};
                this.editProduct(productsEdited);
            }
        }
        /** Si no ha habido ningun cambio, pero si existen items en la tienda actual */
        if (countChanges === 0 && itemsStore.length) {
            this.updateCart(this.cart);
        }
    }

    /**
     * Este método se ejecutara cuando haya productos restringidos, esto sucede cuando se hace el cambio de pais
     * y algun producto del carrito no esta permitido por alguna razon en el pais seleccionado.
     * */
    private deleteProductsFromCart(restricteditems: ICardDetailItem[], itemsStore: IShopifyCartItem[], currentCountry?: string) {

        restricteditems.forEach((v, i) => restricteditems[i].HtmlObjectId = v.Code);

        /** Por cada plataforma, las acciones a ejecutar son diferentes, aca se validan segun sea*/
        switch (SDK_SETTINGS.MOD_PLATAFORM) {
            case 'shopify':
                const restriction = this.validateRestriction(restricteditems, itemsStore, currentCountry);
                if (Object.keys(restriction.objUpdate.updates).length) {
                    this.sdkService.cartShopifyDelete(restriction.objUpdate).subscribe(() => {
                        this.modalProductsRestricted(restriction.html);
                    });
                }
                break;
            case 'bigcommerce':
                restricteditems.forEach((v, i) => {
                    const bigCommerceObservable = this.sdkService.cartBigCommerceDelete(this.cart.Data.Cart.Id, `${v.Id}`);
                    bigCommerceObservable.subscribe(() => {

                    });
                });
                this.modalProductsRestricted(restriction.html);
                break;
            case 'magento':
                const magentoBody = restricteditems.map((r) => {
                    return {idVariant: `${r.Id}`, Errors: r.Errors}
                });
                if (magentoBody.length) this.sdkService.cartMagentoDelete(magentoBody)
                    .subscribe(() => this.modalProductsRestricted(restriction.html));
                break;
            default:
                throw new Error('Nombre de plataforma incorrecto');
        }
    }

    private modalProductsRestricted(html: string) {
        const restrictedModal = new tingle.modal({
            footer: true,
            stickyFooter: true,
            closeMethods: ['overlay', 'button', 'escape'],
        });
        restrictedModal.setContent(html);
        restrictedModal.addFooterBtn('Close', 'tingle-btn tingle-btn--default tingle-btn--pull-right', function () {
            restrictedModal.close();
        });
        restrictedModal.open();
    }

    private editShopifyItemsData(items: IShopifyCartItem[]) {
        items.forEach((v, i) => {
            items[i].Code = `${v.variant_id}`;
            items[i].Quantity = `${v.quantity}`;
        });
        return items;
    }

    private addProduct(productos?: IShopifyCartItem[]) {
        productos = productos ? productos : this.shopifyCart.items;
        let listProducts: any = [];
        productos.forEach((v) => {
            const getWeight = this.utils.calcWeightAndUnit(v.grams);

            const _Optionals = {CustomFields: [`${v.sku}`]}

            const variant_title = !v.variant_title ? '' : `-${v.variant_title}`;
            if (SDK_SETTINGS.CONF.PRODUCT_TYPE_DEFAULT !== '') {
                v.product_type = SDK_SETTINGS.CONF.PRODUCT_TYPE_DEFAULT;
            }

            listProducts.push({
                Product: {
                    HtmlObjectid: `${v.variant_id}`,
                    Id: `${v.variant_id}`,
                    Sku: `${v.variant_id}`,
                    Name: v.product_title + variant_title,
                    Category: v.product_type,
                    Price: (v.price / 100),
                    ImgUrl: v.image,
                    Language: "",
                    Weight: getWeight.weight,
                    WeightUnit: getWeight.unit,
                    VolumetricWeight: 0,
                    DefinitionOpt: "",
                    Quantity: v.quantity,
                    ProductMerchantId: ""
                }, Optionals: _Optionals
            });
        });
        const cartId = this.cart.Data.Cart.Id;
        const headerCartId = {'X-Skybox-Cart-Id': cartId};
        const body = {ListProducts: listProducts};
        let requestObservable = this.sdkService.addProducts(cartId, body, headerCartId);
        requestObservable.pipe(tap((r) => SynchronizeActions.$onAdd.next(r)))
            .subscribe(() => this.reloadCart());
    }

    /** @ToDo falta la interface de edición de productos */
    private editProduct(editedProducts: any) {
        const cartId = this.cart.Data.Cart.Id;
        const headerCartId = {'X-Skybox-Cart-Id': cartId};
        let requestObservable = this.sdkService.editProducts(cartId, editedProducts, headerCartId)
        requestObservable.pipe(tap((r) => SynchronizeActions.$onUpdate.next(r)))
            .subscribe(() => this.reloadCart());
    }

    private removeProduct(productId: string, promise?: boolean) {
        const cartId = this.cart.Data.Cart.Id;
        const headerCartId = {'X-Skybox-Cart-Id': cartId};
        let requestObservable = this.sdkService.removeProducts(cartId, productId, headerCartId)
        if (promise) {
            requestObservable.pipe(
                take(1), tap((r) => SynchronizeActions.$onDelete.next(r))).toPromise()
                .then(() => this.reloadCart());
        }
        else requestObservable.pipe(tap((r) => SynchronizeActions.$onDelete.next(r)))
            .subscribe(() => this.reloadCart());
    }

    private removeCart() {
        const cartId = this.cart.Data.Cart.Id;
        let requestObservable = this.sdkService.removeCart(cartId);
        requestObservable.pipe(tap((r) => SynchronizeActions.$onRemoveCart.next(r)))
            .subscribe(() => this.reloadCart());
    }

    private reloadCart() {
        if (this.loaderModal && this.loaderModal.isOpen()) {
            this.loaderModal.close();
        }
        this.sdkService.getCart(this.cart.Data.Cart.Id).subscribe(cart => {
            GV.$cartData.next(cart);
            this.updateCart(cart);
        });
    }

    private setHtmlConceptDetail(conceptHtml: string) {
        if ($('.international-checkout').length) {
            $('.international-checkout').html(conceptHtml);
            this.utils.hideLoaders();
            this.utils.initBtnSkyCheckout(this.authData);
        } else {
            let findPriceHtml = setInterval(() => {
                if ($('.international-checkout').length) {
                    $('.international-checkout').html(conceptHtml);
                    this.utils.hideLoaders();
                    this.utils.initBtnSkyCheckout(this.authData);
                    clearInterval(findPriceHtml);
                }
            }, 100);
        }
    }

    validateRestriction(arraySky: any[], arrayStore: any[], currentCountry: string) {
        var clonedArrStore = arrayStore,
            objUpdate: any = {updates: {}},
            html = '';

        if (arraySky && arraySky.length > 0) {
            html += '<div>';
            html += '<br />';
            html += ' <p class="restricted-msg">' + 'The following products will be removed from your shopping cart, they are' + '<strong>' + ' restricted in ' + currentCountry + '</strong>';
            html += ' <table>';
            html += '   <tbody>';

            arraySky.forEach((item) => {
                for (var i in clonedArrStore) {
                    var objStore = clonedArrStore[i],
                        code = objStore.variant_id ? String(objStore.variant_id) : String(objStore.id);

                    if ((item.HtmlObjectId).trim() === (code).trim()) {
                        objUpdate.updates[objStore.variant_id] = 0;

                        html += '     <tr>';
                        html += '       <td>';
                        html += '         <center><img style="height: 150px;" src="' + objStore.image + '"</img>' + '</center>';
                        html += '       </td>';
                        html += '       <td>';
                        html += '         <strong> <p class="restricted-msg">' + objStore.title + '</p>' + '</strong>' + '<br />';
                        html += '       </td>';
                        html += '     </tr>';
                        break;
                    }
                }
            });

            html += '   </tbody>';
            html += ' </table>';
            html += '</div>';
        }

        return {
            objUpdate: objUpdate,
            html: Object.keys(objUpdate.updates).length > 0 ? html : ''
        }
    }
}
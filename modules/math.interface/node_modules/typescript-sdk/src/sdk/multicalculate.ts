import {IProduct, IResponseAuth, IResponseMulticaculate, ISdkSettings, IShopifyProduct} from "../common/interfaces";
import {STORAGE_KEY} from "./const";
import {SdkService} from "../common/services/sdk";
import * as GV from "../common/global_variables";
import {removeDuplicates} from "../common/utils/utils";
import {SdkUtils} from "./utils";

export class SdkMulticalculate {

    private settings: ISdkSettings;
    private sdkSevice: SdkService;
    sdkUtils: SdkUtils;
    rutaLoaderGif = "https://s3.amazonaws.com/sky-sbc-images/WebApp/SBC/Images/loaders/loaderGris.gif";
    elemBtnAdd = '.Sky--btn-add';
    classPrices = 'internationalPrice';
    authData: IResponseAuth = <IResponseAuth>GV.store.get(STORAGE_KEY.AUTH_STORE);
    secondsWaitHtmlMulticalculate = 2000;

    constructor(settings: ISdkSettings, sdkService: SdkService) {
        this.settings = settings;
        this.sdkUtils = new SdkUtils();
        this.sdkSevice = sdkService;
        if (this.settings.SKBX_LOADER_NAME) {
            this.rutaLoaderGif = `https://s3.amazonaws.com/sky-sbc-images/WebApp/SBC/Images/loaders/${this.settings.SKBX_LOADER_NAME}`;
        }
    }

    init() {
        $(this.elemBtnAdd).attr('disabled', true as any);
        this.sdkUtils.showLoaders(this.rutaLoaderGif);
        this.multicalculate();
    }

    multicalculate() {
        const productList: IProduct[] = this.proccessMulticalculate();
        if (productList.length) this.getMulticalcute(productList);
    }

    proccessMulticalculate() {
        const internationalPrices = Array.from(document.getElementsByClassName(this.classPrices));
        const productList: IProduct[] = [];
        internationalPrices.forEach((e: HTMLDivElement, index: number) => {
            const elementID = e.getAttribute('id');
            const product: IShopifyProduct = JSON.parse(e.getAttribute('data'));
            const variantID = e.getAttribute('data-variant-id');
            if (elementID && product) {
                let id_shopify_product_variant = String(variantID),
                    title = product.variants[0].name,
                    price = product.variants[0].price / 100,
                    images = product.featured_image,
                    sku = variantID,
                    product_type = product.type;
                const getWeight = this.sdkUtils.calcWeightAndUnit(product.variants[0].weight);
                if (!id_shopify_product_variant) id_shopify_product_variant = `${product.id}`;
                if (this.settings.CONF.PRODUCT_TYPE_DEFAULT !== '') product_type = this.settings.CONF.PRODUCT_TYPE_DEFAULT;
                const idObj = `${id_shopify_product_variant}__${this.sdkUtils.getDate()}${this.authData.Data.CART_SKY.Country.Iso}${this.authData.Data.CART_SKY.Cart.Currency}`;
                if (product_type !== '') {
                    productList.push({
                        HtmlObjectid: idObj,
                        Sku: sku,
                        Name: title,
                        Category: product_type,
                        Price: price,
                        ImgUrl: images,
                        Weight: getWeight.weight,
                        WeightUnit: getWeight.unit,
                        Optionals: {
                            CustomFields: [
                                product.variants[0].sku
                            ]
                        }
                    });
                } else {
                    $(".skbx-loader-" + id_shopify_product_variant).html('<span>Product not available in your country</span>');
                    $(this.elemBtnAdd).hide();
                }
            }
        });
        return productList;
    }

    getMulticalcute(producList: IProduct[]) {
        producList = removeDuplicates(producList, 'HtmlObjectid');
        const headerCartId = {'X-Skybox-Cart-Id': this.authData.Data.Cart.Id};
        this.sdkSevice.getMulticalculate({ListProducts: producList}, headerCartId).subscribe(response => {
            this.setHTMLMulticalculate(response);
        });
    }

    /** @ToDo falta validar un poco esta funciÃ³n  */
    setHTMLMulticalculate(response: IResponseMulticaculate) {
        let productsCalculated: IResponseMulticaculate;
        productsCalculated = response;
        /** agregando la variable `success` con valor `false` a todos los objeteos de la lista */
        productsCalculated.Data.map((v) => v.success = false);
        productsCalculated.Data.forEach((v, i) => {
            const productID = v.HtmlObjectId.toString().split('__')[0];
            this.sdkSevice.getHTMLMulticalculate(v.Url).subscribe((response) => {
                this.showPriceMultiC(productID, response);
                if ($(response).is('span.not-available')) {
                    $(this.elemBtnAdd).hide();
                } else {
                    $(response).show();
                    $(this.elemBtnAdd).attr('disabled', false as any);
                }
                $('#' + 'skybox-product-price-' + productID).html(response);
                $(".skbx-loader-" + productID).hide();
                productsCalculated.Data[i].success = true;
            }, (error) => {
                $("span[class^='skbx-price']").hide();
            });
        });
    }

    /**
     * @param {string} productID ID del producto que se va cambiar su HTML
     * @param {string} html HTML que se va setear sobre el elemento HTML referenciado por `productID`
     */
    showPriceMultiC(productId: string, html: string) {
        const prefModal = ($(".remodal-is-opened").length > 0) ? ".js-quick-shop " : "";// only for modal
        $(prefModal + '#skybox-product-price-' + productId).html(html);
        $(prefModal + '#skybox-product-price-' + productId).removeClass('empty-price');
        $(".skbx-loader-" + productId).hide();
    }
}
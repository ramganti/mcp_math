import {CHECKOUT_BUTTON_TEXT, SDK_SETTINGS} from "./const";
import {ICart, IConcept, IResponseAuth} from "../common/interfaces";
import * as GV from "../common/global_variables";


/** creamos la variable que se usara lineas mas abajo, ya que TypeScript es estricto, esta varaible no existe en todos los navegadores */
declare var safari: any;

/** ya que algunos atributos no existen en el elemento Window, sobreescribimos la interface con los nuevos valores */
declare global {
    interface Window {
        HTMLElement: any;
        safari: any
    }
}

/**
 * Clase Sdk con funciones comunes
 * @class
 * */
export class SdkUtils {
    toLoopAndStylize(className: string, styles: string) {
        let htmlNodes = Array.from(document.querySelectorAll(className));

        if (htmlNodes && htmlNodes.length > 0) {
            htmlNodes.forEach((htmlNode: any) => {
                htmlNode.style.cssText = styles;
            });
        }
    }

    detectHttpRequests() {
        const isIE = this.detectInternetExplorer();
        (function (open) {
            XMLHttpRequest.prototype.open = function () {
                this.addEventListener("readystatechange", function (e: any) {
                    var respondURL = isIE ? this._url : this.responseURL;

                    var isSafari = /constructor/i.test(window.HTMLElement) || (function (p) {
                        return p.toString() === "[object SafariRemoteNotification]";
                    })(!window['safari'] || (typeof safari !== 'undefined' && safari.pushNotification));

                    if (isSafari) {
                        respondURL = this._url;
                    }
                    if (respondURL) {
                        if (this.status == 200 && respondURL.match(/[/]cart.js/gi) && this.readyState == 4) {
                            if ((this.response)) {
                                if (typeof this.response === 'string') GV.$cartDispared.next(JSON.parse(this.response))
                                else if (typeof this.response === 'object') GV.$cartDispared.next(this.response);
                            }
                        }
                    }
                }, false);
                open.apply(this, arguments);
            };
        })(XMLHttpRequest.prototype.open);
    }

    /**
     * @function hideHtmlClasses
     * @param {string} className - Classnames to hide on DOM
     */
    hideHtmlClasses(className: string) {
        this.toLoopAndStylize(className, 'display: none');
    }


    /**
     * @function showHtmlClasses
     * @param {string} className - Classnames to show on DOM
     */
    showHtmlClasses(className: string) {
        this.toLoopAndStylize(className, 'display: block');
    }

    /**
     * detecta si es internet explorer
     * @return {boolean}
     * */
    detectInternetExplorer() {
        const ua = navigator.userAgent;
        return ua.match(/Trident/g);
    }

    getDate() {
        const msecPerMinute = 1000 * 60;
        const msecPerHour = msecPerMinute * 60;
        const msecPerDay = msecPerHour * 24;
        let date = new Date();

        let dateMsec = date.getTime();

        date.setMonth(0);
        date.setDate(1);
        date.setHours(0, 0, 0, 0);

        let interval = dateMsec - date.getTime();

        const days = Math.floor(interval / msecPerDay);
        interval = interval - (days * msecPerDay);

        // Calculate the hours, minutes, and seconds.
        const hours = Math.floor(interval / msecPerHour);
        interval = interval - (hours * msecPerHour);

        const minutes = Math.floor(interval / msecPerMinute);
        interval = interval - (minutes * msecPerMinute);

        const seconds = Math.floor(interval / 1000);

        return days + '' + hours + '' + minutes + '' + seconds;
    }

    changeLastCountry(country: string) {
        GV.store.set('last_country', country);
    }

    showLoaders(rutaLoaderGif?: string, properties?: {}) {
        var rutaLoaderGif = "https://s3.amazonaws.com/sky-sbc-images/WebApp/SBC/Images/loaders/loaderGris.gif";

        if (SDK_SETTINGS.SKBX_LOADER_NAME) {
            rutaLoaderGif = "https://s3.amazonaws.com/sky-sbc-images/WebApp/SBC/Images/loaders/" + SDK_SETTINGS.SKBX_LOADER_NAME;
        }
        const html = `<div><img style="height: 15px;width: 100px !important" src="${rutaLoaderGif}" /></div>`
        $("[class*=skbx-loader]").html(html);
    }

    calcWeightAndUnit(grams: number) {
        let weight, unit;

        if (grams && !isNaN(grams)) {
            weight = (grams / 1000).toFixed(3);
            unit = 'KGS';
        }

        return {
            weight: weight,
            unit: unit
        };
    }

    currency_format(n: any, currency: any) {
        let result;
        n = parseFloat(n);
        result = currency + " " + n.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,");
        result = result.replace(/\.00/g, '');
        return result;
    }

    elementVisibleStore(visible: boolean, skbx_price = '.skbx-price', skbx_pricestore = '.skbx-price-store') {
        if (visible) {
            this.hideHtmlClasses(skbx_price);
            this.showHtmlClasses(skbx_pricestore);
        } else {
            this.hideHtmlClasses(skbx_pricestore);
            this.showHtmlClasses(skbx_price);
        }
    }

    hideLoader(id: any) {
        $(".skbx-loader-" + id).hide();
    }

    hideLoaders() {
        $("[class*=skbx-loader]").hide();
    }

    /** @ToDo analizar esta función, se podria reducir, y manejar mejor los tipos de datos numbers y string */
    updateShoppingCart(carts: ICart, fractionDigits = 2) {
        this.showLoaders();
        if (carts && Object.keys(carts).length > 0) {
            var Data = carts.Data;
            var Cart = Data.Cart;
            var Items = Cart.Items.reverse();

            for (let i = 0; i < Items.length; i++) {
                let idProductStore = Items[i].Code;
                let d = Data;
                let CartCurrencyIso = d.Cart.Currency;
                let skbx_quantity_product = Items[i].Quantity;

                let storeProductPrice: any = Items[i].Price.toString();
                storeProductPrice = storeProductPrice.replace(/,/g, '');

                let skbx_total_product = 0;

                if (storeProductPrice !== null) {
                    skbx_total_product = (skbx_quantity_product * Number(storeProductPrice));
                }

                skbx_total_product = Math.round(skbx_total_product * 100) / 100;
                skbx_total_product = Number(parseFloat(`${skbx_total_product}`).toFixed(fractionDigits));
                skbx_total_product = Number(this.currency_format(skbx_total_product, ''));

                storeProductPrice = Math.round(Number(storeProductPrice) * 100) / 100;
                storeProductPrice = parseFloat(storeProductPrice).toFixed(fractionDigits);
                storeProductPrice = this.currency_format(storeProductPrice, '');

                $('.sky--Price-' + idProductStore).html(CartCurrencyIso + ' ' + storeProductPrice);
                $('.sky--Total-' + idProductStore).html(CartCurrencyIso + ' ' + skbx_total_product);
                this.hideLoader(idProductStore);
            }
        } else {
            this.hideLoaders();
        }
    }

    /** @ToDo acomodar esta función con buenas prácticas */
    conceptsTableCart(data: IConcept) {
        let htmlCart = '';
        if (data) {
            htmlCart += '<div class="cart-totals-wrapper">';
            htmlCart += '    <table id="shopping-cart-totals-table">';
            htmlCart += '        <tbody>';
            let conceptos_detail = data.Data.Concepts;
            if (conceptos_detail.length > 0) {
                for (let x = 0; x < conceptos_detail.length; x++) {
                    htmlCart += '  <tr>';
                    htmlCart += '    <td class="description">' + conceptos_detail[x].Name + '</td>';
                    htmlCart += '    <td class="amount">';
                    htmlCart += '     <span>' + conceptos_detail[x].Currency + ' ' + conceptos_detail[x].Price + '</span>';
                    htmlCart += '    </td>';
                    htmlCart += '   </tr>';
                }

                htmlCart += '            <tr>';
                htmlCart += '                <td class="description">';
                htmlCart += '                    <strong>Grand Total</strong>';
                htmlCart += '                </td>';
                htmlCart += '               <td class="amount">';
                htmlCart += '                   <strong>';
                htmlCart += '                       <span>' + conceptos_detail[0].Currency + ' ' + data.Data.Product.Local.Total + '</span>';
                htmlCart += '                   </strong>';
                htmlCart += '               </td>';
                htmlCart += '            </tr>';
                htmlCart += '        </tbody>';
                htmlCart += '    </table>';
                htmlCart += '</div>';
            }
        }
        return htmlCart;
    }

    initBtnSkyCheckout(authData: IResponseAuth) {
        let skybox_payment_btns = Array.from(document.querySelectorAll('.skybox-checkout-payment-btn')),
            checkout_button_text = 'PROCEED TO CHECKOUT';
        if (skybox_payment_btns.length) {
            skybox_payment_btns.forEach((btn: any) => {
                btn.style.cssText = 'display: none';
                if (authData.Data.LocationAllow === 1) {
                    if (authData.Data.IntegrationType === 3) {
                        checkout_button_text = CHECKOUT_BUTTON_TEXT;
                    }
                    btn.innerHTML = `<a href="${SDK_SETTINGS.CHECKOUT_PAGE}" class="${SDK_SETTINGS.CHECKOUT_BUTTON_CLASS}">${checkout_button_text}</a>`;
                    btn.style.cssText = 'display: block';
                }
            });
        }
    }
}
"use strict";
exports.__esModule = true;
var interval_1 = require("rxjs/observable/interval");
var timer_1 = require("rxjs/observable/timer");
var operators_1 = require("rxjs/operators");
var Storage = /** @class */ (function () {
    function Storage() {
        this.expiration_name = '_expiration';
        this.subscribers = {};
        this.initStorageWithExpiration();
    }
    Storage.prototype.initStorageWithExpiration = function () {
        var keysSessionStorage = Object.keys(sessionStorage);
        if (keysSessionStorage.length) {
            for (var k in keysSessionStorage) {
                if (k) {
                    if (k.includes(this.expiration_name)) {
                        this.setExpirationToKey(k);
                    }
                }
            }
        }
    };
    Storage.prototype.setExpirationToKey = function (k) {
        var _this = this;
        var expirations = this.get("" + k + this.expiration_name);
        var timesDifference = Number(expirations) - new Date().getTime();
        this.subscribers[k] = interval_1.interval(1000).pipe(operators_1.takeUntil(timer_1.timer(timesDifference).pipe(operators_1.tap(function () {
            _this.remove(k);
            _this.remove("" + k + _this.expiration_name);
        }))));
    };
    Storage.prototype.get = function (key) {
        return JSON.parse(sessionStorage.getItem(key));
    };
    Storage.prototype.set = function (key, value, expiration, callback) {
        sessionStorage.setItem(key, JSON.stringify(value));
        if (expiration) {
            var end = new Date();
            end.setSeconds(end.getSeconds() + (expiration / 1000));
            this.set("" + key + this.expiration_name, "" + end.getTime());
            this.setExpirationToKey(key);
        }
    };
    Storage.prototype.remove = function (key) {
        sessionStorage.removeItem(key);
    };
    Storage.prototype.getExpirationIntervalFromKey = function (key) {
        if (key in this.subscribers) {
            return this.subscribers[key];
        }
        throw new Error(key + " no tiene expiraci\u00F3n");
    };
    return Storage;
}());
exports.Storage = Storage;

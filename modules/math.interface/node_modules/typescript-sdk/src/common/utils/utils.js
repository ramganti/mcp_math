"use strict";
exports.__esModule = true;
function isObject(object) {
    return typeof object === 'object';
}
exports.isObject = isObject;
function removeDuplicates(myArr, prop) {
    return myArr.filter(function (obj, pos, arr) {
        return arr.map(function (mapObj) { return mapObj[prop]; }).indexOf(obj[prop]) === pos;
    });
}
exports.removeDuplicates = removeDuplicates;
function compare(a, b) {
    return JSON.stringify(a) === JSON.stringify(b);
}
exports.compare = compare;
function arrayObjectDiff(listOriginal, listNew, uniqueProp) {
    var delta = {
        added: [],
        removed: [],
        common: []
    };
    var _deltaMap = {};
    var _objHolder = {};
    listOriginal.forEach(function (item) {
        _objHolder[uniqueProp && item[uniqueProp] || item] = item;
        _deltaMap[uniqueProp && item[uniqueProp] || item] = 'remove';
    });
    listNew.forEach(function (item) {
        _objHolder[uniqueProp && item[uniqueProp] || item] = item;
        var d = _deltaMap[uniqueProp && item[uniqueProp] || item];
        if (Boolean(d) && d == 'remove') {
            _deltaMap[uniqueProp && item[uniqueProp] || item] = 'noChange';
        }
        else {
            _deltaMap[uniqueProp && item[uniqueProp] || item] = 'added';
        }
    });
    Object.keys(_deltaMap).forEach(function (id) {
        if (_deltaMap[id] == 'remove')
            delta.removed.push(_objHolder[id]);
        else if (_deltaMap[id] == 'added')
            delta.added.push(_objHolder[id]);
        else if (_deltaMap[id] == 'noChange')
            delta.common.push(_objHolder[id]);
    });
    return delta;
}
exports.arrayObjectDiff = arrayObjectDiff;

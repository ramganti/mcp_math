"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
exports.__esModule = true;
var http_1 = require("../utils/http");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var timer_1 = require("rxjs/observable/timer");
var SdkService = (function (_super) {
    __extends(SdkService, _super);
    function SdkService(settings, apiConfig) {
        var _this = _super.call(this) || this;
        _this.$cartJs = new rxjs_1.Subject();
        _this.urlProductChange = function (cartId, productId) {
            if (productId)
                return _this.apiConfig.SKYBOX_CHECKOUT_CART + "/" + cartId + "/product/" + productId + "/";
            else
                return _this.apiConfig.SKYBOX_CHECKOUT_CART + "/" + cartId + "/products/";
        };
        _this.settings = settings;
        _this.apiConfig = apiConfig;
        return _this;
    }
    SdkService.prototype.setAuthHeader = function (token, merchantCode) {
        this.authHeaders = {
            'Content-Type': 'application/json',
            'Authorization': token,
            'X-Skybox-Merchant-Id': merchantCode,
            'Access-Control-Allow-Origin': "*"
        };
        this.setHeaders(this.authHeaders);
    };
    SdkService.prototype.getIP = function () {
        return this.get(this.settings.URL + '/').pipe(operators_1.map(function (r) { return r.response; }));
    };
    SdkService.prototype.authenticate = function (body) {
        return this.post(this.apiConfig.SKYBOX_CHECKOUT_AUHT_CART + '/', body).pipe(operators_1.map(function (r) { return r.response; }));
    };
    SdkService.prototype.getCart = function (cartId) {
        var cartUrl = this.apiConfig.SKYBOX_CHECKOUT_CART + "/" + cartId + "/";
        return this.get(cartUrl).pipe(operators_1.map(function (r) { return r.response; }));
    };
    SdkService.prototype.getMulticalculate = function (body, headers) {
        var specificHeader = __assign({}, headers, this.authHeaders);
        return this.post(this.apiConfig.SKYBOX_CHECKOUT_MULTICALCULATE + '/', body, specificHeader)
            .pipe(operators_1.map(function (r) { return r.response; }));
    };
    SdkService.prototype.getCartJs = function () {
        var _this = this;
        return this.get('/cart.js').pipe(operators_1.tap(function (r) { return _this.$cartJs.next(r); }));
    };
    SdkService.prototype.getHTMLMulticalculate = function (url) {
        return this.get(url, {}, 'text').pipe(operators_1.map(function (r) { return r.response; }), operators_1.retryWhen(function (error) {
            return error.pipe(operators_1.flatMap(function (error) {
                if (error.status !== 200) {
                    return rxjs_1.of(error.status);
                }
                return rxjs_1.throwError({ error: 'No retry' });
            }), operators_1.delay(1000), operators_1.take(10));
        }));
    };
    SdkService.prototype.addProducts = function (cartId, body, headers) {
        var specificHeader = __assign({}, headers, this.authHeaders);
        var url = this.urlProductChange(cartId);
        return this.post(url, body, specificHeader).pipe(operators_1.map(function (r) { return r.response; }));
    };
    SdkService.prototype.editProducts = function (cartId, body, headers) {
        var specificHeader = __assign({}, headers, this.authHeaders);
        var url = this.urlProductChange(cartId);
        return this.put(url, body, specificHeader).pipe(operators_1.map(function (r) { return r.response; }));
    };
    SdkService.prototype.removeProducts = function (cartId, productId, headers) {
        var specificHeader = __assign({}, headers, this.authHeaders);
        var url = this.urlProductChange(cartId, productId);
        return this["delete"](url).pipe(operators_1.map(function (r) { return r.response; }));
    };
    SdkService.prototype.removeCart = function (cartId) {
        var url = this.urlProductChange(cartId);
        return this["delete"](url).pipe(operators_1.map(function (r) { return r.response; }));
    };
    SdkService.prototype.getConcepts = function (cartID) {
        var url = this.apiConfig.SKYBOX_CHECKOUT_CART + "/" + cartID + "/concepts";
        return this.get(url).pipe(operators_1.map(function (r) { return r.response; }));
    };
    SdkService.prototype.cartShopifyDelete = function (body) {
        return this.post('/cart/update.js', body).pipe(operators_1.map(function (r) { return r.response; }));
    };
    SdkService.prototype.cartBigCommerceDelete = function (cardId, itemId) {
        return this["delete"]("/carts/" + cardId + "/items/" + itemId)
            .pipe(operators_1.map(function (r) {
            var data = r.response.lineItems.physicalItems;
            if (data) {
                if (data.find(function (v) { return v.id === itemId; }))
                    throw r;
            }
            return r.response;
        }), operators_1.retryWhen(function (errors) { return errors.pipe(operators_1.tap(function (val) { return console.log("Value " + val); }), operators_1.delayWhen(function () { return timer_1.timer(1000); })); }));
    };
    SdkService.prototype.cartMagentoDelete = function (body) {
        var bodyString = JSON.stringify(body);
        return this.get("/delete?idVariant=" + bodyString + "&i=" + Math.floor((Math.random() * 9999 + 1000)));
    };
    return SdkService;
}(http_1.Http));
exports.SdkService = SdkService;
//# sourceMappingURL=sdk.js.map